/** This file was generated by scripts/generate_cpp.py */
#ifndef C128D_USB_KEYS_H
#define C128D_USB_KEYS_H

#include <Arduino.h>

// The number concurrently pressed keys that can be stored at one time
#define KEY_BUFFER_SIZE 16

// Sparse array containing all currently pressed keys. A 0x00 indicates an unused index.
extern uint8_t usb_key_buffer[KEY_BUFFER_SIZE];

struct PinState {
    bool is_set;      // Is this pin set to GRD for output
    uint8_t pin_num;  // Teensy3.6 output pin number
};

#define OUTPUT_PINS_COUNT 23

// Computed state of all output pins
extern PinState* pins_state[OUTPUT_PINS_COUNT];

struct KeyInfo {
    bool is_sent;  // Is this USB key sent to the C128d?
    PinState *row_pin;
    PinState *col_pin;
};

// Teensy 3.6 digital output pin numbers for the C128d keyboard matrix
#define ROW0_PIN        22
#define ROW1_PIN        21
#define ROW2_PIN        20
#define ROW3_PIN        15
#define ROW4_PIN        18
#define ROW5_PIN        17
#define ROW6_PIN        16
#define ROW7_PIN        19
#define RESTORE_PIN     14
#define FORTYEIGHTY_PIN 11
#define CAPSLOCK_PIN    12
#define COL0_PIN        23
#define COL1_PIN        6
#define COL2_PIN        5
#define COL3_PIN        4
#define COL4_PIN        3
#define COL5_PIN        2
#define COL6_PIN        1
#define COL7_PIN        7
#define K0_PIN          8
#define K1_PIN          9
#define K2_PIN          10
#define RESTORE0_PIN    13


// The highest USB key code that will be used
#define MAX_USB_KEY_CODE 0x6e

// Every entry in the array refers to a one-byte USB key code
extern KeyInfo usb_key_mapping[MAX_USB_KEY_CODE + 1]; 

void initialize_usb_key_buffer();
void initialize_pins_state();


#endif
