/** ${header_comment} */
#ifndef C128D_USB_KEYS_H
#define C128D_USB_KEYS_H

#include <Arduino.h>
#include "USBHost_t36.h"
#include "lock_key.hpp"

// The number concurrently pressed keys that can be stored at one time
#define KEY_BUFFER_SIZE 16

// Sparse array containing all currently pressed keys. A 0x00 indicates an unused index.
extern uint8_t usb_key_buffer[KEY_BUFFER_SIZE];

struct PinState {
    bool is_set;      // Is this pin set to GRD for output
    uint8_t pin_num;  // Teensy3.6 output pin number
};

#define OUTPUT_PINS_COUNT ${output_pins_count}

// Computed state of all output pins
extern PinState* pins_state[OUTPUT_PINS_COUNT];

struct KeyInfo {
    bool is_sent;  // Is this USB key sent to the C128d?
    PinState *row_pin;
    PinState *col_pin;
};

// Teensy 3.6 digital output pin numbers for the C128d keyboard matrix
${teensy36_output_pins}

// The highest USB key code that will be used
#define MAX_USB_KEY_CODE ${max_usb_key_code}

// Every entry in the array refers to a one-byte USB key code
extern KeyInfo usb_key_mapping[MAX_USB_KEY_CODE + 1]; 

// Mappings for the keypad when numlock is off
extern KeyInfo numlock_off_kp_2;
extern KeyInfo numlock_off_kp_4;
extern KeyInfo numlock_off_kp_6;
extern KeyInfo numlock_off_kp_8;

${usb_key_defs}

extern LockKey c128d_caps_lock;
extern LockKey c128d_40_80;

void initialize_usb_key_buffer();
void initialize_keyboard_output_pins(); 
void add_keycode_to_buffer(uint8_t key_code);
void remove_keycode_from_buffer(uint8_t key_code);
void update_output_pins(KeyboardController keyboard_controller);
void initialize_lock_key_state();

#endif
