/** ${header_comment} */
#ifndef KEY_MAPPING_HPP
#define KEY_MAPPING_HPP

#include <stdint.h>

// Represents the state of an output pin, which is calculated on every pass of the main loop
struct PinState {
    bool is_set;      // Is this pin set to GRD for output
    uint8_t pin_num;  // Teensy3.6 output pin number
};

#define OUTPUT_PINS_COUNT ${output_pins_count}

/**
 * An array of all PinState's which represent the calculated state of all 
 * output pins. This is main for conveniently reseting the buffered state of 
 * every output pin before the new states are calculated from usb_key_buffer.
 */
extern PinState* pins_state[OUTPUT_PINS_COUNT];


// Describes a mapping of a USB keyboard key to the keyboard matrix on a C128D.
struct KeyInfo {
    bool is_sent;  // Is this USB key sent to the C128d?
    PinState *row_pin;
    PinState *col_pin;
};

// The highest USB key code that will be used
#define MAX_USB_KEY_CODE ${max_usb_key_code}

/**
 * Every entry in the array refers to a USB key code. Any key code which isn't
 * directly sent to the C128D will have is_sent set to false, otherwise is_sent
 * will be set to true, and row_pin and col_pin will point to the KeyInfo 
 * which indicates which Teensy output pins are set to OUTPUT LOW.
 */
extern KeyInfo usb_key_mapping[MAX_USB_KEY_CODE + 1]; 

// Mappings for the keypad when numlock is off
extern KeyInfo numlock_off_kp_2;
extern KeyInfo numlock_off_kp_4;
extern KeyInfo numlock_off_kp_6;
extern KeyInfo numlock_off_kp_8;

${usb_key_defs}

#endif