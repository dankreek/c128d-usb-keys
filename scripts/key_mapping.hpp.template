/** ${header_comment} */
#ifndef KEY_MAPPING_HPP
#define KEY_MAPPING_HPP

#include <stdint.h>

/**
 * Represents the state of all output pins, true meaning set LOW, false meaning disconnected
 */
struct PinsState {
    bool row0;       
    bool row1;       
    bool row2;       
    bool row3;       
    bool row4;       
    bool row5;       
    bool row6;       
    bool row7;       
    bool restore;    
    bool forty_eighty;
    bool caps_lock;
    bool col0;       
    bool col1;       
    bool col2;       
    bool col3;       
    bool col4;       
    bool col5;       
    bool col6;       
    bool col7;       
    bool k0;         
    bool k1;         
    bool k2;         
    bool restore0;
};

#define OUTPUT_PINS_COUNT ${output_pins_count}

// An instance of PinsState for the key mapping 
extern PinsState output_pins_state;

/**
 * An array of all output pin states which represent the calculated state of all 
 * output pins. This is mainly for conveniently reseting the buffered state of 
 * every output pin before the new states are calculated.
 */
extern bool* pins_state[OUTPUT_PINS_COUNT];


// Describes a mapping of a USB keyboard key to the keyboard matrix on a C128D.
struct KeyInfo {
    bool is_sent;
    bool *row_pin;
    bool *col_pin;
};

// The highest USB key code that will be used
#define MAX_USB_KEY_CODE ${max_usb_key_code}

/**
 * Every entry in the array refers to a USB key code. Any key code which isn't
 * directly sent to the C128D will have is_sent set to false, otherwise is_sent
 * will be set to true, and row_pin and col_pin will point to the KeyInfo 
 * which indicates which Teensy output pins are set to OUTPUT LOW.
 */
extern KeyInfo usb_key_mapping[MAX_USB_KEY_CODE + 1]; 

// Mappings for the keypad when numlock is off
extern KeyInfo numlock_off_kp_2;
extern KeyInfo numlock_off_kp_4;
extern KeyInfo numlock_off_kp_6;
extern KeyInfo numlock_off_kp_8;

${usb_key_defs}

#endif